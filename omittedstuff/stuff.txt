*------Index.js------*

// slash command prereq
// const { SlashCommandBuilder } = require('@discordjs/builders');
// const { REST } = require('@discordjs/rest');
// const { Routes } = require('discord-api-types/v9');

// When the client is ready, run this code (only once)
// client.on('ready', () => {
//     console.log('Ready!');
//     // get guild
//     const guild = client.guilds.cache.get(guildid)
//     let commands
//     //  check if guild exist
//     if(guild){
//         commands = guild.commands
//     }
//     else{
//         commands = client.application?.commands
//     }
//     commands?.create({
//         name:'ping',
//         description:'Reply with pong',    
//     })
// });

// client.on('interactionCreate', async (interaction) => {
//     if(!interaction.isCommand()){
//         return
//     }
//     const {commandName, options} = interaction
//     if (commandName===`ping`){
//         interaction.reply({
//             content: 'pong',
//             ephemeral: true,
//         })
//     }
// })
// client.on('messageCreate',(message) => {
//     if(message.content===`${prefix}ping`){
//         message.reply({content:'pong'})
//     }
// })

*-----CommandHandler.js------*

        // Currentguild.commands.set(CommandsArray).then(async(command) => {
        //     const Roles = (commandName) => {
        //         const CmdPerms = CommandsArray.find((c)=>c.name === commandName).permission
        //         if(!CmdPerms) return null;
        //         // get roles from cache
        //         return Currentguild.roles.cache.filter((r)=>r.permissions.has(CmdPerms))
        //     }

        //     const fullPermissions = command.reduce((accumulator,r)=>{
        //         const roles = Roles(r.name);
        //         if(!roles) return accumulator;
                
        //         const permissions = roles.reduce((a,r)=>{
        //             return[...a, {id: r.id,type:'ROLE',permission:true}]
        //         },[]);

        //         return [...accumulator,{id:r.id,permissions}]
        //     },[]);

        //     await Currentguild.commands.permissions.set({fullPermissions})
        // });

// send status in channel
        const status = new MessageEmbed()
            .setColor('RANDOM')
            .setDescription(`**Client:** üü¢ Online, **Db:**${connection.readyState}`)
        client.guilds.cache.get(guildid).channels.cache.get('983002770468655195').send({embeds: [status]})

// import event handler
require('./Handlers/EventHandler.js')(client);
// import command handler
require('./Handlers/CommandHandler')(client);




// pre-reqs
const { CommandInteraction, MessageEmbed } = require('discord.js')
module.exports = {
    name: 'gu',
    description: 'Update guild info',
    permission: 'BAN_MEMBERS',
    options: [
        {
            name: 'guild',
            description: 'Choose Guild. ',
            required: true,
            type: 3,
            choices: [
                {
                    name: 'The Watchers',
                    value: 'TW'
                },
                {
                    name: 'The Watcher Sis',
                    value: 'TWS'
                },
                {
                    name: 'MfinSquis',
                    value: 'MFS'
                },
            ],
        },
        {
            name: 'guildspace',
            description: 'GuildSpace for the guild.',
            required: true,
            type: 4
        }
    ],
    /**
     * 
     * @param {CommandInteraction} interaction 
     */
    async execute(interaction) {
        // fetch old embed
        let channel = interaction.guild.channels.cache.get('982747128801660929')
        let target_msg = await channel.messages.fetch(`${channel.lastMessageId}`, { force: true, cache: true })
        // check if message exist
        if (!target_msg) {
            interaction.reply({ content: ` ‚ö†Ô∏è Message not found !! Check if Original Message in **<#982747128801660929>** was deleted. \n If so use /guild command to add new message. `, ephemeral: true })
        } else {
            // edit the embed
            const newemb = new MessageEmbed(switch_guild(interaction.options.getString('guild')))
            newemb.fields[3].value = `${interaction.options.getInteger('guildspace')}`
            target_msg.embeds[0].edit({ embeds: [newemb] })

            // Send confirmation embed
            const emb = new MessageEmbed()
                .setColor('GREEN')
                .setDescription(`‚úÖ Guild Status Updated in **<#982747128801660929>**`)
            interaction.reply({ embeds: [emb], ephemeral: true })
        }

        // switch guild function
        function switch_guild(valset) {
            var set_embed = '';
            switch (valset) {
                case 'TW': set_embed = target_msg.embeds[0]
                    break;
                case 'TWS': set_embed = target_msg.embeds[1]
                    break;
                case 'MFS': set_embed = target_msg.embeds[2]
                    break;
            }
            return set_embed;
        }
    }
}

            // const newemb = new MessageEmbed(target_msg.embeds[set_guild])
            // newemb.fields[3].value = `${interaction.options.getInteger('guildspace')}`
            // // check if optional params given
            // if (interaction.options.getInteger('guildlvl')) { newemb.fields[1].value = `${interaction.options.getInteger('guildlvl')}` }
            // if (interaction.options.getInteger('maxguildcap')) { newemb.fields[4].value = `${interaction.options.getInteger('maxguildcap')}` }
            // // send edited embed
            // if (set_guild == 0) {
            //     target_msg.edit({ embeds: [newemb, target_msg.embeds[1], target_msg.embeds[2]] })
            // } else if (set_guild == 1) {
            //     target_msg.edit({ embeds: [target_msg.embeds[0], newemb, target_msg.embeds[2]] })
            // } else {
            //     target_msg.edit({ embeds: [target_msg.embeds[0], target_msg.embeds[1], newemb] })
            // }